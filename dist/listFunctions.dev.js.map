{"version":3,"sources":["listFunctions.js"],"names":["require","config","mongoose","List","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","exports","getAllLists","req","res","find","_userId","user_id","then","lists","status","json","err","error","message","createList","newList","title","body","save","list","updateList","findOneAndUpdate","_id","params","id","$set","deleteList","findOneAndRemove","result"],"mappings":"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","sourcesContent":["// listFunctions.js\r\nrequire('dotenv').config();\r\n\r\nconst mongoose = require('./db/db');\r\nconst { List } = require('./db/models/list.model');\r\n\r\n// Connect to MongoDB\r\nmongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\nexports.getAllLists = (req, res) => {\r\n    List.find({ _userId: req.user_id })\r\n        .then(lists => res.status(200).json(lists))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.createList = (req, res) => {\r\n    let newList = new List({\r\n        title: req.body.title,\r\n        _userId: req.user_id\r\n    });\r\n    newList.save()\r\n        .then(list => res.status(201).json(list))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.updateList = (req, res) => {\r\n    List.findOneAndUpdate({ _id: req.params.id, _userId: req.user_id }, { $set: req.body }, { new: true })\r\n        .then(list => res.status(200).json(list))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.deleteList = (req, res) => {\r\n    List.findOneAndRemove({ _id: req.params.id, _userId: req.user_id })\r\n        .then(result => res.status(200).json({ message: 'List deleted successfully' }))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n"],"file":"listFunctions.dev.js"}