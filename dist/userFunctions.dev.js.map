{"version":3,"sources":["userFunctions.js"],"names":["require","config","mongoose","User","jwt","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","exports","registerUser","req","res","newUser","body","save","then","user","status","json","err","error","message","loginUser","email","password","findByCredentials","createSession","session","refreshAccessToken","refreshToken","header","userId","findByIdAndToken","generateAccessAuthToken","accessToken","send","updateUserProfile","findByIdAndUpdate","user_id","$set","changeUserPassword","findById","deleteUser","findByIdAndRemove"],"mappings":"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","sourcesContent":["// userFunctions.js\r\nrequire('dotenv').config();\r\n\r\n\r\nconst mongoose = require('./db/db');\r\nconst { User } = require('./db/models/user.model');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n// Connect to MongoDB\r\nmongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\nexports.registerUser = (req, res) => {\r\n    let newUser = new User(req.body);\r\n    newUser.save()\r\n        .then(user => res.status(201).json(user))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.loginUser = (req, res) => {\r\n    let { email, password } = req.body;\r\n    User.findByCredentials(email, password)\r\n        .then(user => user.createSession())\r\n        .then(session => res.status(200).json(session))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.refreshAccessToken = (req, res) => {\r\n    const refreshToken = req.header('x-refresh-token');\r\n    const userId = req.header('_id');\r\n    User.findByIdAndToken(userId, refreshToken)\r\n        .then(user => user.generateAccessAuthToken())\r\n        .then(accessToken => res.header('x-access-token', accessToken).send({ accessToken }))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.updateUserProfile = (req, res) => {\r\n    User.findByIdAndUpdate(req.user_id, { $set: req.body }, { new: true })\r\n        .then(user => res.status(200).json(user))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.changeUserPassword = (req, res) => {\r\n    User.findById(req.user_id)\r\n        .then(user => {\r\n            user.password = req.body.password;\r\n            return user.save();\r\n        })\r\n        .then(() => res.status(200).json({ message: 'Password updated successfully' }))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.deleteUser = (req, res) => {\r\n    User.findByIdAndRemove(req.user_id)\r\n        .then(() => res.status(200).json({ message: 'User deleted successfully' }))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n"],"file":"userFunctions.dev.js"}