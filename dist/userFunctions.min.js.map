{"version":3,"sources":["userFunctions.js"],"names":["require","config","mongoose","jwt","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","exports","registerUser","req","res","User","body","status","json","user","error","err","message","newUser","password","findByCredentials","email","then","session","refreshAccessToken","refreshToken","header","userId","loginUser","generateAccessAuthToken","accessToken","send","findByIdAndUpdate","user_id","$set","new","changeUserPassword","findById","save","findByIdAndToken","findByIdAndRemove"],"mappings":"aACAA,QAAQ,UAAUC,SAGlB,IAAMC,SAAWF,QAAQ,oBAARA,QAAQ,0BAAnBE,cAAAA,KAEAC,IAAMH,QAAQ,gBAGpBE,SAASE,QAAQC,QAAQC,IAAIC,UAAW,CAAEC,iBAAiB,EAAMC,oBAAoB,IAErFC,QAAQC,aAAe,SAACC,EAAKC,GACX,IAAIC,KAAKF,EAAIG,MAHtBX,OAAiCI,KAAAA,SAAAA,GAAe,OAAEK,EAAnBG,OAAA,KAAAC,KAAAC,KAAxChB,MAAiEO,SAAAA,GAAAA,OAAoBI,EAAAG,OAAA,KAAAC,KAAA,CAAAE,MAAAC,EAAAC,aAErFX,QAAQC,UAAR,SAAAC,EAAuBC,GAACD,IAAAA,EACOG,EAA3BA,KAAIO,EADgBV,EAChBU,MAAUC,EADMX,EACNW,SACdD,KAAOE,kBACGC,EAAAP,GAAIQ,KAAO,SAAAR,GAACF,OAAOE,EAAKD,kBADlCS,KAEW,SAAAC,GAAA,OAAAP,EAAGJ,OAAA,KAAAC,KAAAU,KAFdL,MAEsBN,SAAAA,GAAAA,OAAOH,EAAXG,OAAqB,KAAAC,KAAA,CAAAE,MAAAC,EAAAC,aAAzBX,QAFdkB,mBAAA,SAAAhB,EAAAC,GAFJ,IAAAgB,EAAAjB,EAAAkB,OAAA,mBAiBUC,EAASnB,EAAIkB,OAAO,OAV9BpB,KAAQsB,iBAAYD,EAAAF,GAAcH,KAAA,SAAAR,GACJN,OAAIG,EADAkB,4BACxBR,KADwB,SAAAS,GACxBT,OADwBZ,EAAAiB,OAAA,iBAAAI,GAAAC,KAAA,CAAAD,YAAAA,MAAlCxB,MAAkC,SAAAU,GAAA,OAAAP,EAAAG,OACjBO,KADiBN,KAAA,CAAAE,MAAAC,EAAAC,aAGhBX,QACTgB,kBAAY,SAAAd,EAAAC,GAAAC,KAAAsB,kBAAoBnB,EAAhBoB,QAAJ,CAAAC,KAAA1B,EAAAG,MAAA,CAAAwB,KAAA,IAFjBb,KAGW,SAAAR,GAAA,OAAAL,EAAAO,OAAG,KAAAH,KAAAC,KADG,MACKF,SAAAA,GAAAA,OAAOH,EAAXG,OAAqB,KAAAC,KAAA,CAAAE,MAAAC,EAAAC,aAAzBX,QAHd8B,mBAAA,SAAA5B,EAAAC,GAFJC,KAAA2B,SAAA7B,EAAAyB,SAyBSX,KAAK,SAAAR,GAhBJW,OADFD,EAAAA,SAARhB,EAA6BG,KAAAQ,SACPL,EAAMwB,SAEnBC,KAAAA,WAAAA,OAAAA,EAAiBZ,OAAtB,KAA8BF,KAAAA,CAAAA,QACpB,oCAZd,MAY0B,SAAAT,GAACa,OAAAA,EAAAA,OAAAA,KAAAA,KAAT,CAAAd,MAAAC,EAAAC,aAC4Da,QAAAA,WAAAA,SAAAA,EAAAA,GAAFpB,KAAnD8B,kBAAAhC,EAAAyB,SAFrBX,KAGW,WAAA,OAAAb,EAAAO,OAAG,KAAAH,KAAA,CAAAI,QAAA,gCAD0D,MAClDL,SAAAA,GAAAA,OAAOH,EAAXG,OAAqB,KAAAC,KAAA,CAAAE,MAAAC,EAAAC","file":"userFunctions.min.js","sourcesContent":["// userFunctions.js\r\nrequire('dotenv').config();\r\n\r\n\r\nconst mongoose = require('./db/db');\r\nconst { User } = require('./db/models/user.model');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n// Connect to MongoDB\r\nmongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\nexports.registerUser = (req, res) => {\r\n    let newUser = new User(req.body);\r\n    newUser.save()\r\n        .then(user => res.status(201).json(user))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.loginUser = (req, res) => {\r\n    let { email, password } = req.body;\r\n    User.findByCredentials(email, password)\r\n        .then(user => user.createSession())\r\n        .then(session => res.status(200).json(session))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.refreshAccessToken = (req, res) => {\r\n    const refreshToken = req.header('x-refresh-token');\r\n    const userId = req.header('_id');\r\n    User.findByIdAndToken(userId, refreshToken)\r\n        .then(user => user.generateAccessAuthToken())\r\n        .then(accessToken => res.header('x-access-token', accessToken).send({ accessToken }))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.updateUserProfile = (req, res) => {\r\n    User.findByIdAndUpdate(req.user_id, { $set: req.body }, { new: true })\r\n        .then(user => res.status(200).json(user))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.changeUserPassword = (req, res) => {\r\n    User.findById(req.user_id)\r\n        .then(user => {\r\n            user.password = req.body.password;\r\n            return user.save();\r\n        })\r\n        .then(() => res.status(200).json({ message: 'Password updated successfully' }))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.deleteUser = (req, res) => {\r\n    User.findByIdAndRemove(req.user_id)\r\n        .then(() => res.status(200).json({ message: 'User deleted successfully' }))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n"]}