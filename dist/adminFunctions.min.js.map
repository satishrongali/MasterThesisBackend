{"version":3,"sources":["adminFunctions.js"],"names":["require","config","mongoose","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","exports","getAllUsers","req","res","status","json","users","error","err","message","User","find","then","params","user","password","body","save","adminChangePassword","findOne","_id","userId","email","new","findByIdAndUpdate","isAdmin","findByIdAndRemove"],"mappings":"aACAA,QAAQ,UAAUC,SAGlB,IAAMC,SAAWF,QAAQ,oBAARA,QAAQ,0BAAnBE,cAAAA,KAINA,SAASC,QAAQC,QAAQC,IADzBC,UAAA,CAAAC,iBAAA,EAAAC,oBAAA,IAGAC,QAAQC,YAAc,SAACC,EAAKC,GAF5BV,KAASC,KAAAA,IAAiCI,KAAAA,SAAAA,GAAiB,OAAnBK,EAAAC,OAAA,KAAAC,KAAAC,KAAxCb,MAAiEM,SAAAA,GAAAA,OAAoBI,EAAAC,OAAA,KAAAC,KAAA,CAAAE,MAAAC,EAAAC,aAErFT,QAAQC,oBAAc,SAAAC,EAAAC,GAClBO,KAAKC,QACAC,CAAAA,IAAKV,EAAAW,OAAAP,SAAKM,KAAO,SAAAE,GACJX,OAFlBW,EAEWC,SAAGb,EAAAc,KAAAD,SAAQX,EAAOa,SAAfL,KAAA,WAAA,OAAAT,EAAAC,OAAA,KAAAC,KAAA,CAAAI,QAAA,oCAFdC,MAAA,SAAAF,GAAA,OAAAL,EAAAC,OAAA,KAAAC,KAAA,CAAAE,MAAAC,EAAAC,aAKJT,QAAQkB,iBAAR,SAAAhB,EAA8BC,GAC1BO,KAAKS,iBAAQ,CAAAC,IAAAlB,EAAAW,OAAAQ,QAAA,CAAAC,MAAApB,EAAAc,KAAAM,OAAA,CAAAC,KAAA,IAAOrB,KAAIW,SAAAA,GAAAA,OAAOQ,EAAAA,OAAAA,KAAAA,KAAAA,KAA/BX,MACU,SAAAF,GAAA,OAAAM,EAAQV,OAAA,KAAAC,KAAA,CAAAE,MAAAC,EAAAC,aAGbT,QACAY,iBAAK,SAAAV,EAAAC,GAAAO,KAAAc,kBAAsBnB,EAAhBQ,OAAqBQ,OAAA,CAAAI,SAAA,GAAA,CAAAF,KAAA,IAAEd,KAAO,SAAAK,GAAE,OAAAX,EAAAC,OAAA,KAAAC,KAAAS,KAAtC,MAAA,SAAAN,GAAA,OAAAL,EAAAC,OAAA,KAAAC,KAAA,CAAAE,MAAAC,EAAAC,aAC+BF,QAAAA,gBAAWE,SAAAA,EAAAA,GAAbC,KAAzBgB,kBAAAxB,EAAAW,OAAAQ,QANdT,KAAA,WAAA,OAAAT,EAAAC,OAAA,KAAAC,KAAA,CAAAI,QAAA,gCAMuC,MAP3C,SAAAD,GAAA,OAAAL,EAAAC,OAAA,KAAAC,KAAA,CAAAE,MAAAC,EAAAC","file":"adminFunctions.min.js","sourcesContent":["// adminFunctions.js\r\nrequire('dotenv').config();\r\n\r\n\r\nconst mongoose = require('./db/db');\r\nconst { User } = require('./db/models/user.model');\r\n\r\n// Connect to MongoDB\r\nmongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\nexports.getAllUsers = (req, res) => {\r\n    User.find({})\r\n        .then(users => res.status(200).json(users))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.adminChangePassword = (req, res) => {\r\n    User.findOne({ _id: req.params.userId })\r\n        .then(user => {\r\n            user.password = req.body.password;\r\n            return user.save();\r\n        })\r\n        .then(() => res.status(200).json({ message: 'Password changed successfully' }))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.adminChangeEmail = (req, res) => {\r\n    User.findOneAndUpdate({ _id: req.params.userId }, { email: req.body.email }, { new: true })\r\n        .then(user => res.status(200).json(user))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.grantAdminRights = (req, res) => {\r\n    User.findByIdAndUpdate(req.params.userId, { isAdmin: true }, { new: true })\r\n        .then(user => res.status(200).json(user))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n\r\nexports.adminDeleteUser = (req, res) => {\r\n    User.findByIdAndRemove(req.params.userId)\r\n        .then(() => res.status(200).json({ message: 'User deleted successfully' }))\r\n        .catch(err => res.status(500).json({ error: err.message }));\r\n};\r\n"]}